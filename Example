hessian1 <- function(theta, grad, eps) {
  g<-grad
  n<-length(theta)
  hess<-matrix(nrow=n,ncol=n)
  h<-rep(0, 2)
  h[1] <- eps
  h[2] <- eps
  for (i in 1:n){
    for (j in 1:n){
      e_i=rep(0,n)
      e_i[i]=1
      e_j=rep(0,n)
      e_j[j]=1
      hess[i, j] = ((g(theta + eps*e_j)[i] - g(theta-eps*e_j)[i])/4*eps) +  ((g(theta+eps*e_i)[j] - g(theta-eps*e_i)[j])/4*eps)
    }
  }
  return(hess)
}

newt <- function(theta,func,grad,hess,...,tol=1e-8,max.half=20,eps=1e-6) {#fscale=1,maxit=100,max.half=20){
  g <- grad(theta)
  if (is.null(hess)){
    hess<-function(theta){hessian1(theta,grad,eps)}
  }
  
  while (length(g[g > tol]) > 0) {
    #check if the hessian is positive definite. If it isn't, the we perturb it
    
    if (inherits(try(chol(hess), silent=TRUE), "try-error")) {
      #perturb the hessian if it isn't positive definite
      
      #check that this value for the dk works
      dk <- eps/sqrt(eps)
      H <- hess(theta) + diag(length(theta))*dk
    } else {
      H <- hess(theta)
    }
    
    if (inherits(try(chol(H), silent=TRUE), "try-error")) {
      print("HERE")
    }
    
    #Need to find a way to get rid of the solve
    delta <- solve(H) %*% grad(theta)
    
    #step-halving
    #we need to check that the function's value is actually being minimised
    counter <- 0
    while(func(theta + delta) <= func(theta)) {
      if (counter >= max.half) {
        #error goes here
        break
      }
      delta <- delta/2
      counter <- counter + 1
    }
    
    theta <- theta - delta
    print(c(theta, func(theta)))
    
    g <- grad(theta)
  }
  theta
}

#test case 1
rb <- function(th,k=2) {
  k*(th[2]-th[1]^2)^2 + (1-th[1])^2
}
gb <- function(th,k=2) {
  c(-2*(1-th[1])-k*4*th[1]*(th[2]-th[1]^2),k*2*(th[2]-th[1]^2))
}
hb <- function(th,k=2) {
  h <- matrix(0,2,2)
  h[1,1] <- 2-k*2*(2*(th[2]-th[1]^2) - 4*th[1]^2)
  h[2,2] <- 2*k
  h[1,2] <- h[2,1] <- -4*k*th[1]
  h
}

#Test case 2
dummy<-function(theta){
  x1<-theta[1];x2<-theta[2]
  return((1.5-x1+x1*x2)^2 + (2.25 - x1 + x1*x2^2)^2 + (2.625-x1+x1*x2^3)^2)
}
dummy_grad<-function(theta){
  return(grad(dummy,theta))
}
dummy_hess<-function(theta){
  return(hessian_csd(dummy,theta))
}
